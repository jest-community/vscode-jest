import { platform } from 'os'
import { existsSync, readFileSync } from 'fs'
import { normalize, join } from 'path'

import { IPluginResourceSettings, hasUserSetPathToJest } from './Settings'

/**
 * Known binary names of `react-scripts` forks
 */
const createReactAppBinaryNames = ['react-scripts', 'react-native-scripts', 'react-scripts-ts', 'react-app-rewired']

/**
 * Tries to read the test command from the scripts section within `package.json`
 *
 * Returns the test command in case of success,
 * `undefined` if there was an exception while reading and parsing `package.json`
 * `null` if there is no test script
 */
export function getTestCommand(rootPath: string): string | undefined | null {
  try {
    const packagePath = join(rootPath, 'package.json')
    const packageJSON = JSON.parse(readFileSync(packagePath, 'utf8'))
    if (packageJSON && packageJSON.scripts && packageJSON.scripts.test) {
      return packageJSON.scripts.test
    }
    return null
  } catch {
    return undefined
  }
}

/**
 * Checks if the supplied test command could have been generated by create-react-app
 */
export function isCreateReactAppTestCommand(testCommand: string): boolean {
  return testCommand && createReactAppBinaryNames.some(binary => testCommand.indexOf(binary + ' test') === 0)
}

/**
 * Checks if the project in `rootPath` was bootstrapped by `create-react-app`.
 */
function isBootstrappedWithCreateReactApp(rootPath: string): boolean {
  const testCommand = getTestCommand(rootPath)
  if (testCommand === undefined) {
    // In case parsing `package.json` failed or was unconclusive,
    // fallback to checking for the presence of the binaries in `./node_modules/.bin`
    return createReactAppBinaryNames.some(binary => hasNodeExecutable(rootPath, binary))
  }
  return isCreateReactAppTestCommand(testCommand)
}

function hasNodeExecutable(rootPath: string, executable: string): boolean {
  const ext = platform() === 'win32' ? '.cmd' : ''
  const absolutePath = join(rootPath, 'node_modules', '.bin', executable + ext)
  return existsSync(absolutePath)
}

/**
 * Handles getting the jest runner, handling the OS and project specific work too
 *
 * @returns {string}
 */
// tslint:disable-next-line no-shadowed-variable
export function pathToJest({ pathToJest, rootPath }: IPluginResourceSettings) {
  if (hasUserSetPathToJest(pathToJest)) {
    return normalize(pathToJest)
  }

  if (isBootstrappedWithCreateReactApp(rootPath)) {
    return 'npm test --'
  }

  const localJestExecutable = pathToLocalJestExecutable(rootPath)
  if (existsSync(localJestExecutable)) {
    return localJestExecutable
  }
  return 'jest'
}

function pathToLocalJestExecutable(rootDir) {
  return normalize(join(rootDir, 'node_modules/.bin/jest'))
}

/**
 * Handles getting the path to config file
 *
 * @returns {string}
 */
export function pathToConfig(pluginSettings: IPluginResourceSettings) {
  if (pluginSettings.pathToConfig !== '') {
    return normalize(pluginSettings.pathToConfig)
  }

  return ''
}

export function pathToJestPackageJSON(pluginSettings: IPluginResourceSettings): string | null {
  let pathToNodeModules = join(pluginSettings.rootPath, 'node_modules')

  if (pluginSettings.pathToJest) {
    const relativeJestCmd = removeSurroundingQuotes(pluginSettings.pathToJest.split(' ')[0])
    const relativePathToNodeModules = relativeJestCmd.replace(/node_modules.+$/i, 'node_modules')

    pathToNodeModules = join(pluginSettings.rootPath, relativePathToNodeModules)
  }

  const defaultPath = normalize(join(pathToNodeModules, 'jest/package.json'))
  const cliPath = normalize(join(pathToNodeModules, 'jest-cli/package.json'))
  const craPath = normalize(join(pathToNodeModules, 'react-scripts/node_modules/jest/package.json'))
  const paths = [defaultPath, cliPath, craPath]

  for (const i in paths) {
    if (existsSync(paths[i])) {
      return paths[i]
    }
  }

  return null
}

function removeSurroundingQuotes(str) {
  return str.replace(/^['"`]/, '').replace(/['"`]$/, '')
}

/**
 *  Taken From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions
 */
export function escapeRegExp(str: string): string {
  return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') // $& means the whole matched string
}

/**
 * ANSI colors/characters cleaning based on http://stackoverflow.com/questions/25245716/remove-all-ansi-colors-styles-from-strings
 */
export function cleanAnsi(str: string): string {
  return str.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '')
}
